;(function() {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.data = void 0;
function createEmptyDD() {
  var dd = document.createElement('div');
  dd.classList.add('custom-dd');
  dd.innerHTML = "<div class=\"current-element\">\n      <span class=\"current-element-value\"></span>\n      <button>/</button>\n    </div>\n    <ul class=\"list\">\n    </ul>";
  return dd;
}
function initDD(dd, setCurrentItemIndex) {
  var list = dd.querySelector('.list');
  var currentElementBox = dd.querySelector('.current-element');
  currentElementBox.addEventListener('click', function () {
    list.classList.toggle('open');
  });
  window.addEventListener('click', function (event) {
    if (!currentElementBox.contains(event.target)) {
      list.classList.remove('open');
    }
  });
  var currentElement = dd.querySelector('.current-element-value');
  list.addEventListener('click', function (event) {
    if (event.target.nodeName === 'LI') {
      currentElement.innerText = event.target.innerText;
      setCurrentItemIndex(+event.target.dataset.index);
    }
  });
}
function fillItems(categories, items, dd, currentItemIndex, onItemElementCreated, isEmptyCategoriesShown) {
  var list = dd.querySelector('.list');
  categories.forEach(function (category) {
    var categoryItems = items.filter(function (item) {
      return item.category === category;
    });
    if (categoryItems.length || isEmptyCategoriesShown) {
      var categoryEl = document.createElement('div');
      categoryEl.innerText = category;
      list.append(categoryEl);
    }
    categoryItems.forEach(function (item, index) {
      var li = document.createElement('li');
      li.innerText = item.name;
      li.dataset.index = index;
      onItemElementCreated(li, index);
      list.append(li);
    });
  });
  var currentElement = dd.querySelector('.current-element-value');
  currentElement.innerText = items[currentItemIndex].name;
}
function createDropdown(categories, items, parentElement, onItemElementCreated, isEmptyCategoriesShown) {
  var currentItemIndex = 0;
  var dd = createEmptyDD();
  parentElement.append(dd);
  initDD(dd, function (newIndex) {
    return currentItemIndex = newIndex;
  });
  fillItems(categories, items, dd, currentItemIndex, onItemElementCreated, isEmptyCategoriesShown);
}
var _default = createDropdown;
exports["default"] = _default;
var data = 123;
exports.data = data;
}());

;(function() {
'use strict';

require("./toggler.js");
require("./test-framework.js");
require("./styles.css");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
window.addEventListener('error', function (event) {
  console.log('Ooops', event);
});
var CURRENT_LI_KEY = 'currentLi';
var allLiElements = _toConsumableArray(document.querySelectorAll('.lesson-plan li'));
var currentLiIndex = localStorage.getItem(CURRENT_LI_KEY);
if (currentLiIndex) {
  var elementToHighlight = allLiElements[currentLiIndex];
  setAsActive(elementToHighlight);
}
document.querySelector('.lesson-plan').addEventListener('click', function (e) {
  if (e.target.nodeName !== 'LI') {
    return;
  }
  var previousActive = document.querySelector('.lesson-plan li.active');
  if (previousActive) {
    previousActive.classList.remove('active');
  }
  localStorage.setItem(CURRENT_LI_KEY, allLiElements.indexOf(e.target));
  setAsActive(e.target);
});
function setAsActive(element) {
  element === null || element === void 0 ? void 0 : element.classList.add('active');
}
}());

;(function() {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setResultMessageGetter = exports.setNumbersCount = exports.setAction = exports.run = void 0;
var MIN_NUMBER = 1;
var MAX_NUMBER = 20;
var readNumber = function readNumber(numberName) {
  var input = prompt('Enter number ' + numberName);
  if (isNumberValid(input, MIN_NUMBER, MAX_NUMBER)) {
    return +input;
  }
  throw new Error('Invalid number');
};
var isNumberValid = function isNumberValid(num, min, max) {
  if (typeof min !== 'number' || typeof max !== 'number' || min > max) {
    throw new Error('Invalid min or max');
  }
  return !isNaN(num) && min <= num && num <= max;
};
var data = {
  numbers: [],
  numbersCount: 3,
  doAction: function doAction(numbers) {
    return numbers.reduce(function (prevSum, currentNumber) {
      return prevSum + currentNumber;
    }, 0);
  },
  getResultMessage: function getResultMessage(result) {
    return 'Sum of numbers is ' + result;
  }
};
var run = function run() {
  try {
    for (var i = 0; i < data.numbersCount; i++) {
      data.numbers.push(readNumber(i + 1));
    }
  } catch (_unused) {
    alert('Invalid number');
    return;
  }
  var result = data.doAction(data.numbers);
  alert(data.getResultMessage(result));
};
exports.run = run;
var setResultMessageGetter = function setResultMessageGetter(getMessage) {
  if (typeof getMessage === 'function') {
    data.getResultMessage = getMessage;
  }
};
exports.setResultMessageGetter = setResultMessageGetter;
var setAction = function setAction(doAction) {
  if (typeof doAction === 'function') {
    data.doAction = doAction;
  }
};
exports.setAction = setAction;
var setNumbersCount = function setNumbersCount(newCount) {
  if (typeof newCount === 'number' && !isNaN(newCount) && newCount > 0) {
    data.numbersCount = newCount;
  }
};
exports.setNumbersCount = setNumbersCount;
}());

;(function() {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
var _element = /*#__PURE__*/new WeakMap();
var _messageContainer = /*#__PURE__*/new WeakMap();
var _yesButton = /*#__PURE__*/new WeakMap();
var _noButton = /*#__PURE__*/new WeakMap();
var _onYes = /*#__PURE__*/new WeakMap();
var _onNo = /*#__PURE__*/new WeakMap();
var ModalDialog = /*#__PURE__*/function () {
  function ModalDialog() {
    _classCallCheck(this, ModalDialog);
    _classPrivateFieldInitSpec(this, _element, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _messageContainer, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _yesButton, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _noButton, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _onYes, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _onNo, {
      writable: true,
      value: void 0
    });
  }
  _createClass(ModalDialog, [{
    key: "init",
    value: function init(parentElement) {
      var _this = this;
      _classPrivateFieldSet(this, _element, document.createElement('div'));
      _classPrivateFieldGet(this, _element).className = 'modal-bg';
      this.hide();
      _classPrivateFieldGet(this, _element).innerHTML = "\n      <div class=\"modal-dialog\">\n        <div>Confirm deletion</div>\n        <div class=\"modal-dialog-text\">Are you sure?</div>\n        <div>\n          <button class=\"yes-btn\">Yes</button>\n          <button class=\"no-btn\">No</button>\n        </div>\n      </div>";
      _classPrivateFieldGet(this, _element).onclick = function (_ref) {
        var target = _ref.target;
        if (target === _classPrivateFieldGet(_this, _element)) {
          _this.hide();
        }
      };
      _classPrivateFieldSet(this, _messageContainer, _classPrivateFieldGet(this, _element).querySelector('.modal-dialog-text'));
      _classPrivateFieldSet(this, _yesButton, _classPrivateFieldGet(this, _element).querySelector('.yes-btn'));
      _classPrivateFieldGet(this, _yesButton).onclick = function () {
        var _classPrivateFieldGet2;
        (_classPrivateFieldGet2 = _classPrivateFieldGet(_this, _onYes)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.call(_this);
        _this.hide();
      };
      _classPrivateFieldSet(this, _noButton, _classPrivateFieldGet(this, _element).querySelector('.no-btn'));
      _classPrivateFieldGet(this, _noButton).onclick = function () {
        var _classPrivateFieldGet3;
        (_classPrivateFieldGet3 = _classPrivateFieldGet(_this, _onNo)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.call(_this);
        _this.hide();
      };
      if (parentElement) {
        parentElement.append(_classPrivateFieldGet(this, _element));
      } else {
        document.body.append(_classPrivateFieldGet(this, _element));
      }
    }
  }, {
    key: "show",
    value: function show(message, onYes, onNo) {
      _classPrivateFieldGet(this, _messageContainer).innerText = message;
      _classPrivateFieldGet(this, _element).style.display = '';
      _classPrivateFieldSet(this, _onYes, onYes);
      _classPrivateFieldSet(this, _onNo, onNo);
    }
  }, {
    key: "hide",
    value: function hide() {
      _classPrivateFieldGet(this, _element).style.display = 'none';
    }
  }]);
  return ModalDialog;
}();
exports["default"] = ModalDialog;
}());

;(function() {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
var _element = /*#__PURE__*/new WeakMap();
var _modalDialog = /*#__PURE__*/new WeakMap();
var _addListElement = /*#__PURE__*/new WeakSet();
var _removeElement = /*#__PURE__*/new WeakSet();
var ProductList = /*#__PURE__*/function () {
  function ProductList() {
    _classCallCheck(this, ProductList);
    _classPrivateMethodInitSpec(this, _removeElement);
    _classPrivateMethodInitSpec(this, _addListElement);
    _classPrivateFieldInitSpec(this, _element, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _modalDialog, {
      writable: true,
      value: void 0
    });
    _defineProperty(this, "purchasings", []);
  }
  _createClass(ProductList, [{
    key: "init",
    value: function init(parentElement, modalDialog) {
      _classPrivateFieldSet(this, _modalDialog, modalDialog);
      _classPrivateFieldSet(this, _element, document.createElement('ul'));
      _classPrivateFieldGet(this, _element).className = 'shopping-list';
      if (parentElement) {
        parentElement.append(_classPrivateFieldGet(this, _element));
      } else {
        document.body.append(_classPrivateFieldGet(this, _element));
      }
    }
  }, {
    key: "addProduct",
    value: function addProduct(name, amount) {
      this.purchasings.push({
        name: name,
        amount: amount
      });
      _classPrivateMethodGet(this, _addListElement, _addListElement2).call(this, name, amount);
    }
  }]);
  return ProductList;
}();
exports["default"] = ProductList;
function _addListElement2(name, amount) {
  var pElement = document.createElement('li');
  pElement.innerHTML = "<span>".concat(name, ": ").concat(amount, " </span><button>X</button>");
  pElement.querySelector('button').onclick = _classPrivateMethodGet(this, _removeElement, _removeElement2).bind(this, name);
  _classPrivateFieldGet(this, _element).append(pElement);
}
function _removeElement2(name) {
  var _this = this;
  var msg = 'Are you sure you want to delete ' + name + ' from the list?';
  _classPrivateFieldGet(this, _modalDialog).show(msg, function () {
    var itemIndexToDelete = _this.purchasings.findIndex(function (p) {
      return p.name === name;
    });
    _this.purchasings.splice(itemIndexToDelete, 1);
    _classPrivateFieldGet(_this, _element).children[itemIndexToDelete].remove();
  });
}
}());

;(function() {
"use strict";

var _miniFramework = require("./miniFramework.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
(0, _miniFramework.setAction)(function (numbers) {
  var _numbers = _slicedToArray(numbers, 2),
    a = _numbers[0],
    pow = _numbers[1];
  return Math.pow(a, pow);
});
(0, _miniFramework.setResultMessageGetter)(function (res) {
  return 'a^b = ' + res;
});
(0, _miniFramework.setNumbersCount)(2);
(0, _miniFramework.run)();
}());

;(function() {
"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var subListElements = _toConsumableArray(document.querySelectorAll('li > ul'));
subListElements.forEach(function (listEl) {
  listEl.style.display = 'none';
  listEl.parentElement.style.cursor = 'pointer';
  listEl.parentElement.addEventListener('click', function (e) {
    e.stopPropagation();
    if (e.target !== listEl.parentElement) {
      return;
    }
    if (listEl.style.display) {
      listEl.style.display = '';
    } else {
      listEl.style.display = 'none';
    }
  });
});
}());
